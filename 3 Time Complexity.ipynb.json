{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import symbolic capability to Python\n",
    "from sympy import *\n",
    "from sympy.abc import *\n",
    "from sympy.plotting import plot\n",
    "from IPython.display import display\n",
    "# print things all pretty\n",
    "init_printing()\n",
    "import math"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Size of the problem: n "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = symbols(\"n\", positive=True, real=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Different Functions f with different Time complexity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "f_constant = 20\n",
    "f_linear = 4 * n + 10\n",
    "f_linear2 = 10 * n +1\n",
    "f_quadratic = 1/4 * n**2 + 1/2*n +1 \n",
    "f_quadratic2 = 1/8 * n**2 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Definition of Order of Growth (O) (\"Big O\")\n",
    "\n",
    "Order of growth (O) is a set of functions whose asymptotic growth behavior is considered equivalent:\n",
    "\n",
    "Two functions f(n) and g(n) have the equivalent order of growth if $\\displaystyle \\lim_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = c$ with $c > 0$ and $c < \\infty $.\n",
    "\n",
    "\n",
    "f(n) has a higher order of growth than g(n) if\n",
    "$\\displaystyle \\lim_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = \\infty $.\n",
    "\n",
    "f(n) has a smaller order of growth than g(n) if $\\displaystyle \\lim_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = 0 $.\n",
    "\n",
    "$f(n) \\in O(g(n))$ if $\\displaystyle \\lim_{n \\rightarrow \\infty} \\frac{f(n)}{g(n)} = c$ with $c < \\infty $."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Test Order of Growth with the Sympy limit function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACEAAAASCAYAAADVCrdsAAAABHNCSVQICAgIfAhkiAAAAdRJREFUSInN1UuIzlEYx/HPMDbEkGKjGJNhYSmUjUtpWFiQ5bBgIWqQhSJ5Rykrl3FdSLKXJEIhuSSlLOTyMjVZMAk1SZNcxuKcV2f+5j9z3tXMb/M7//M8db7n/J/znIZKpWK0NS4ZT8dWXME79KMPD7GlkJurWbiAD/iBHhzHtDSpMRlvxFl8xD28x0ysx3msiTkDmQAteIwZuIrXWIydaMMyfClCVLEO1/Enmd+Hp9gQgS5nQpyJAB04mcwfxW4cxjYGH/FdXCsAQC/OxfHyTIC5WC0c/+lC7CC+ox2TihDD6Wf0X5n5K6Pf9v+mvuERJmJpLkQjNsXxzUyI+dGrJfG30VtzIY5gIW7gViZEU/S+knhtfmoORAf2CJXdngmQo4boAyNB7MAJvMQKfK1jkdpOm0riU9K8MohdOIUXEaC3DgB4E721JD4verUMYi+O4XkE+FQnAKHZEa5pcY3JQqPqx5OhIA4IhfgMq/B5hMVasAATCvPdwvWcI/zWVJ1Cf7gk9ItBHXMzDuE3HghFWVQPLibfdzAbzTGWarvQtruEDb3CEuF0q9hfS0whmqOPF2piKN0vQAynbiwSNtaGtcK71CWcxr9CbxhrT/moaUxA/AVN9mH5oyYpAQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle 2.0$"
      ],
      "text/plain": [
       "2.00000000000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(f_quadratic / f_quadratic2, n, oo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABEAAAALCAYAAACZIGYHAAAABHNCSVQICAgIfAhkiAAAAPVJREFUKJGl0rErhVEYBvDfh0GWu7CabPgD1E0po5DJ4A+4I4M7fykLA5PNxmJgwiBfKQOSlBgMymYgo+1eg/er27mfDJ46w3nO+z7v85xzsjzP/Rc9FdwSXvGFPQwEP4VbfOIUw7+JjGMbq5jDBI4wiuMQmcczDpFBXyKygjUcxH4WdzgPkUbwF7gKd0XqZCwKSjxiF4NoJrWX4bArToZ2wr2gF0MJ3y7jpCJPqHfsa1jGOzbKpsBkOO26ky2cRdMb1v28VAPXEW0HC+hHUeXkPiZv4gQf0fCAmZh+g2ksltFTJ7AfK0WBkRjc6jyo+mx/oZUS3z4DMu2erq5tAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle \\infty$"
      ],
      "text/plain": [
       "∞"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(f_quadratic / f_linear, n, oo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAA4AAAASCAYAAABrXO8xAAAABHNCSVQICAgIfAhkiAAAAQ1JREFUOI2t0k8rxFEUxvHPyIoYNlYWIjNvQP5kZdRk6Q1Y2FIsbJSFsbCmKZaSd2BrY0XeAUZTStlZSJINFr879XPnTiLP5qnT+Z57bs8p1Go1f1FXojaMIzziHffYx2C+qTuCxnCJIZziBpNYxwJm8ZR68TBAa1jEJirYQxm7qVVHUQ2rHUQDt/GKJfTGYCX4GT4i8AUX6MF0DJaDN6R1F7wUg8Xgzx3AVn0gBn9SIfhnDLYmFqXVn+/Lg7fBSx3A8eCNGDwPXtX+hT5Z+G+4isGmLIoRrEbgjiy/E1mebSe3Iju5OuZxjSnMhRW3Wo3xSk1M4DgAG7L7rWNGuNPUi/CA5UT9m36T4/+AXwFDL+NOlWa/AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle 0$"
      ],
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit( f_linear2 / f_quadratic2, n, oo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plotting Time Complexity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "expr_range = (n,0,30)\n",
    "p = plot(\n",
    "    f_constant,\n",
    "    f_linear,\n",
    "    f_quadratic,\n",
    "    expr_range,\n",
    "    show = False,\n",
    "    legend = True\n",
    ");\n",
    "\n",
    "p[0].line_color = 'g'\n",
    "p[1].line_color = 'b'\n",
    "p[2].line_color = 'r'\n",
    "\n",
    "\n",
    "\n",
    "p[0].label = 'constant'\n",
    "p[1].label = 'linear'\n",
    "p[2].label = 'quadratic'\n",
    "\n",
    "p.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Crossover point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 0.25 n^{2} + 0.5 n + 1 = 4 n + 10$"
      ],
      "text/plain": [
       "      2                       \n",
       "0.25⋅n  + 0.5⋅n + 1 = 4⋅n + 10"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e1 = Eq(f_quadratic, f_linear)\n",
    "e1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle \\left[ 16.2195444572929\\right]$"
      ],
      "text/plain": [
       "[16.2195444572929]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(e1, n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$\\displaystyle 16.2195444572929$"
      ],
      "text/plain": [
       "16.2195444572929"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(e1, n)[0].evalf()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Todo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO: Define \n",
    "# - a logarithmic function\n",
    "lo = math.log2(14)\n",
    "# - a log-linear (n log n) function\n",
    "#loglin = n log n\n",
    "# - a cubic function\n",
    "cubic = n**3\n",
    "#3*n**3 + 2*n**2 + 7*n + 1\n",
    "# - an exponential function\n",
    "expo = 2**n\n",
    "# - a factorial function\n",
    "fact = 4 * 3 * 2 * 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO create multiple plots with different combinations of functions\n",
    "expr_range = (n,0,30)\n",
    "p = plot(\n",
    "    lo,\n",
    "    cubic,\n",
    "    expo,\n",
    "    fact,\n",
    "    show = False,\n",
    "    legend = True\n",
    ");\n",
    "p[0].line_color = 'g'\n",
    "p[1].line_color = 'b'\n",
    "p[2].line_color = 'r'\n",
    "\n",
    "\n",
    "\n",
    "p[0].label = 'lo'\n",
    "p[1].label = 'cubic'\n",
    "p[2].label = 'expo'\n",
    "p.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'math' has no attribute 'loglog'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-17-e7f8f8f32a32>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# TODO create a log-log plot with your factorial, exponential, quadratic, log-linear, and linear function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloglog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfact\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: module 'math' has no attribute 'loglog'"
     ]
    }
   ],
   "source": [
    "# TODO create a log-log plot with your factorial, exponential, quadratic, log-linear, and linear function\n",
    "plot.loglog(fact, expo, cubic, lo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEcAAAAWCAYAAACSYoFNAAAABHNCSVQICAgIfAhkiAAAAvFJREFUWIXt2FuIVXUUx/GPl8iHEQIf8iHIpAJBPTMaREhgRYEIIYaQQprkmyAjPqRFMAiREBE92UMPGdGbZLehQgwvFHjJwUrNlKKCLkRgjUSjZQ/rv5n/2e3OzDlnjw4xX9iss/977XXW/p31X3txpg0MDJiimuld3r8Zp/BbOj7Bym6Tmix0K8732I6luAsHsA+Lu4w7KehWnLcwiK9wDk/jd9zTZdxrwTxcxSp8gEu4gPsLh27FyZmBtejBxzXGHQ9zsAlv4jz+wEUcwROqn7OR7FY8n86/wAuFw8waElskes0sUTWr8FkNcdthDXbjB3yEb3EzVuMVrEg+V7N7GiLfR9N9sBfPFg51iPMlenETHsFrWI7Pa4g9Xs7hYbyHv7P1p3A05bVaPHxBA+8aFQbmi8rDv8vtQaHuc1iIN/AThsVWubsisZEU8Dh2YAj97TxZDRzAO5qFgR/xcvq8vHStISo+pw8ni5OyOH3J3oljon/swUHRZN/G7DESnS622GThcrJXsrUeUSUnS75N4pS31ZJk78UyfJpd2ytKsxeH09ouUcrfCdHWiV9orFmnX2zD8TIkRoR2mYn16fP72fpisUOGsrU5uEULcYrK2ahZGDiTbF4Vc/F6shfFQLhCvBpb0Y9bx/DJ2aMzcXaJ9jBYyqkhxo/hbK0Pfxp9ziZxenC76PSDFV80P9kL2drjHSRMzBgTzRZsw1k8Vrq2Ox05+5XaQd5zetP5h5pfeQVLRHV83Xm+14zNeAmncR9+7SRIXjlFvzlR4Tcbd+CQauHaZSJ7Tj9eFKPEA/i5vdRGycUp+s3xCr8+UVVVwnXCRPWcJ0WfGRJjyS/tpzZKuXJGRFMtszTZcpPulHk1xcl5BjvFD/iQDrdSTiHOjVggxv6RCr9CnLoqp242CGH+EmPGlgqfb/BqO0ELcRbiBtVbihBnWLz+JiO3JTvDf0/nB3UozglMa+G3oJ2g14GBdNRKnX9Z/O+YEqcFU+K04B8JBJbwkUvSXQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle n^{3} = 2^{n}$"
      ],
      "text/plain": [
       " 3    n\n",
       "n  = 2 "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TODO Calculate one crossover point for two functions\n",
    "e2 = Eq(cubic, expo)\n",
    "e2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgEAAAAXCAYAAACS9pzOAAAABHNCSVQICAgIfAhkiAAACndJREFUeJztnXuQHUUVh7/NAiaEcsFEWRFxoUSlSsoYEbDEmEiM+DY8tKxSYuELBBENhCJiuVES46uIFha+jUERTWKwkIcSY4IxhVgYDQpI+VieCdEkbJSHJnH949dTd+7c7rkzc2f6zub2V5WazXTfOd2nT589t/tMb9/w8DCBQCAQCAR6jwmxn2cCY7F/93ajQR5ZAWwHJpf4zCGku+UlPrMIZfTtZagv7y2lRdXJGqL7Oi/LlnzqPFCc4DvS8W3HReUN0Ts6n0rz7/exqGCCpfIGYBFwVQcNcvFZ4BfAg8CTwE5gM/BJYIql/iGosX93PG8ajQ6d6qizxZQfH7t3AvAuYCnweK4e1B9b36YA7wPWAH9Buh8FNiKjsdnBncD1wBVoHNI4HNgHfDl2L89Ydyqrm7hsqWqd15m6zPMq6DXfAflt2afvyCOvbr4D/PnrJ9Dv9UXA/fEC28PWA8NUEwR8FEU7twJfAr4P7DXytgDPTdT/N7AHGHA8b0HsZ1ud05BTuAm4K3Z/CbAbuDpX68cHtr6dBXwDOAn4DbAMWA28GPgm8COgz/KszwCDwIVtZL4V2dKa2L28Y92JrG7isqWqdV5n6jLPq6DXfAcUs2WfviOrvLr5DvDnr59A+hsGRuIFBxRveyGeDjxlub8YWAhcBnwoUTYKHGb5zPOQsh4AjgIOtdS5xFw/F7v3AmA2UuaTWRs+TnD17T7gLcCNwP9i9xcCdwBnAKcjQ4tzB9oW+iCKzvc55M4FdgC3xe7lHetOZHWLNFuqWud1pg7zvAp60XdAMVv26TuyyquT74Du+esmbCsBVWIbWFBkA3CspWwX0E/rEsd8FMQsMv9PfkOYDrwGRVIbYvfPQVHUD7M1uVTejgxwFA36Xcign2ap2wd8BLgb6e1htDozgCK5EctnXH1bB9xAs0EBbAO+an6e6Wjzdcj5znaUDyA930Cz0RUZ66Ky0qhS52m2VKXO604d5nkV9KLvgOK27NN3tJNXN98B3fHXLfgOAly82Vy3WMoeM9f45J+C9kbWAz8395LfEKIlxOS3g9nICG4v0tAOWIIG+zjgWmQgfeb+z4ADE/W/gpaBBoCvAz8A5qAlsmTdiCJ922Ouex3lvzbX1zrK3wgcBPw4o7y0sS5bVtU6L2pLnep8vOJznldB8B2tpNmyT9/RTl7dfAd0x1+34Hs7IOJiFPEPoMSIU9DALrXU3WWuAyi6ArgAONjUH42VRwwBZ6Jlletj9yejJKN78JvU8woUQT4InIgiOsy9NcCb0JLmEnP/VcB5qP0n0XCQC4G1wBEkkjso1rcDgLPNz7c46vzWXGc4yucaebc6yvOMdaey4lSt86K2VIbOxwvdmudVEHxHK+1s2afvaCevTr4DuuevrQ/tBhejTM2IW4D3AP+w1E1+Q5iEnMNmFJH1oWWT+DeEj6Glxc/TvKTyHHN/a0etz8855noFDYMCRXPzgTegbNDIqOaZ62Ia/Qf4LzLEjRYZRfq2FCWb3IR0aWMULW8dZSmbiJKybsa9hJdnrDuVFadqnRe1pU51Pp7o1jyvguA7Wmlnyz59R5q8uvkO6I6/tpJnO2CE1vcM0/59L+VZg2hSD6IEh2PQZJ9uqRv/hgAaoKko8QEj61+x8meYOtuAaxLPil4v2YWdMvsYJ+rXOkvZfcBDwNE0HNxLzdVmPLdjXwpq17ckFyKDvhd4d5u6O5HOk8xBkXpatm2ese5UVpyqdZ5X31COzstmhGpsHro3z/MwA+2/PmJknOmol2W8Ryhfl3X0HZDdln36Dpe8uvkO6I6/tpJnJeCvZIuiIh7JUOdRNDC/Q8pdgSKdOJGSDkWR03zTllWxOqM0BuR8tNTyaeA/iWdFGZgTHe2poo/QcFyuqG8ritwGUCQZ1X/UUncfynBN0q5vcc5Hr97cjd673tmm/iTs2dBzUbR7YwaZWca6LFlQvc7z6BvK03nZVGXzcXzP8zxMBv4AfIfWbOs4Wca7Cl3WzXdAPlv26Ttc8urmO6A7/tpKniDAdUhHGdyPOjgNRTD/jJXFlwnPQhHYuTRneI6a8oloCXE3jSzKONvN1XbgBFTXx2g/cxA5iiTPTtTbba6HA39L1O1H7X84cb9d3yIuAq4E/oj6uz29OhOQ400e5NKPEnXWxdqdhbSxLlNW1TrPqm8oT+dVUOW8TuJrnufhZvOvHVnGuwpd1sl3QD5b9uk7XPLq6DvAv79O/UBdOMJck69vxJcJL0HLf8sTdXab8nnAs4CvYR/wrWg/6YWdNzcXm811pqXs+cCRaNAeS9Q/xVL/ZOzBW5a+XYoM6vfALNobFOZ5feYzcWYgAy5y8IZrrMuUVbXOs9pSmTrfH/Axz6ug130H5Ldln77DJa+OvgP8+2snPoOAF6HIytaGxWhSb6J1jyRS9Blor2YZrct/0UEj89GyzzJHG8bQe59T0WD64tvmejnwzNj9fuALSAffit1fYa4fpzkb+iAayShJ2vXtEyix5E4UUSajaBcnm+svE/dPR8lYP7F8puhYF5HlomqdZ7GlsnUO+sU4hhKk6kgd5nkV9LLvgGK27NN3uOTV0XeAf3/txOfbAaehLN7b0BLLDrR88mqU8LENeL/lc9Fgn4icgO24zsg5HIYGMG2vbTVyNK9D5zL7YBN6j3kBWtZZhV4LeT3a29qIdBOxAb1r+gHgT6bNe9Cy1ijqny0b2tW3ecCnUPT8K+zHSo5g/0Mac8znkpPobaZftn2womNdRJYLHzpPs6UqdA6NwN31nnC3qcM8H0bnzKcxC50/kIde9B1Q3JZ9+g6XvLr6DvDrr534DALWIkW9EngJ2rd4HCV6XIP+qIMt4SEe8V1NY/8lTrQkOEbz4NhYjQzibHTAgy8uRctGFxjZByIjvxz4IvpmE+c8GkdAnosmwxr07ulD2PeqXH072lz70R6TjQ20GtUAmkQ/Re/MRrwcLYld6XhWkbEuKiuNqnWeZktl6zzieJQlnzXJyTd1mOdXoZPT0nigTbmNXvQdUMyWffoOl7w6+w7w569T6RseHo5+nomWEBahSHp/5jK0TDOdxn7OeOFYNCGuA95pKS+zbx9Gk24Gikgjlhg5x1Be8ppPWXlJ03nZtuTSA8gh7kBOaAGBshlDSYmrUuoE35EN3/PZJq/uvgP86DzJerSy0gf2ICDiz2h/Zn9kIurfFhpHUdaNQZQIEl9GOhhYiQ6reAeNs7TjlNW3SSh63UTru9P3oP3aaR08v1uy0iii8zJtKU0PmOevRCflbbOUB/JzCI092c0oKXEt+rZpWy0IvqM9vuezS17dfQf40Tko9yB5yFIfNG8HjND4Ix2QPRFhPPIUOnBhFnpPuI5/F/wiFDmuR5mkgyhB5Ej0StNKx+fK6tsQWpZbbik7ruAz6yArjSI6L9OWhnDrAXSoTdZ3uQPZOIHmLz/RNsN3sSdfBt/RniH8zmeXvLr7DvCjc9CfEl5kK4ivBATqxano2Mxp6HS0vWhZ6VqUFb3H/dFAQYLOA/sDwY79M251HoKAQCAQCAR6lDodFhQIBAKBQMAjIQgIBAKBQKBH+T+5KOJHENvygwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left[ - \\frac{3 W\\left(- \\frac{\\log{\\left(2 \\right)}}{3}\\right)}{\\log{\\left(2 \\right)}}, \\  - \\frac{3 W_{-1}\\left(- \\frac{\\log{\\left(2 \\right)}}{3}\\right)}{\\log{\\left(2 \\right)}}\\right]$"
      ],
      "text/plain": [
       "⎡    ⎛-log(2) ⎞       ⎛-log(2)     ⎞ ⎤\n",
       "⎢-3⋅W⎜────────⎟   -3⋅W⎜────────, -1⎟ ⎥\n",
       "⎢    ⎝   3    ⎠       ⎝   3        ⎠ ⎥\n",
       "⎢───────────────, ───────────────────⎥\n",
       "⎣     log(2)             log(2)      ⎦"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(e2,n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMYAAAASCAYAAAAANKFkAAAABHNCSVQICAgIfAhkiAAABTtJREFUaIHt2mmsXVMUB/Dfo8SLmoVGIuIJKSqq0ZpqiJhCiKIiolGiJRIN0i8oHiIq0sTwyRSKD2aJ1Ng2TUoQHyhBYlatoVVzdTCUD+vc3PtOzz33nnPvOy+S+09O9hn23v+z9tp77bXWOX2Dg4N66KGHodgidX0O7sFr+A3/4rGSfd+OxViB9fgJ7+JG7JKqOz3hyjv+6ZCjGaY1cFySU+9oPIPvsDEpX8WpXZKlzNgXbdOHi/EWfsc6MV6zsGULrnblr4qnqOzTFdDLqFTjOTgYa7ESY1sIkYer8A4WYjW2xeEYxMzkfEVSdxluatLP0TgeL3XIkYU9xeCuxeicenNwC9ZggVDWrjgEx+HFhrplZSkz9kXbzBeGYDWewB84AXfhGEwVEySLp135q+IpKnshvaQXxlUJyWc4FktakOVhe2zIuH8rrsU1uDy5tyw5svBmUt7XIUcafXgIP+JZzG5Sb6pQ1iKcJSxgI7ZKXZeVpczYF2lzppisX2KSmHzE+z+Js3EhHk61Kyp/VTxFx6uQXtKu1BJ8Kns1F0XWhCUGB/Zto49xwup/gxe6zDFLWImLhEXLwhbCXVuH822uLPgrh6MRrWQpM/ZF2pyVlPPUJyvx/tcn51ek2pSRvyqebs3VTL2kd4wqcHpSvt9G3UuT8kHZfnlZjv0xV2ztS8UCycKR2BtP42ecJgZyA95WtzTtoKws3cKYpPwi41nt3gTsiF+S6zLyV8XTLWTqpYqFMVv47zvgUEwWE3Zui3b9uACb8EAXOUbhUXwt3K08TEzKVSKWOSj1fKkIAn9o0U8RWYYLNeu9d8azgYbzsSJoppz8VfF0A031knalhgOzRZboSjFhX8ZJWgt5rrAqL8kPoIty3CCCuekik5WH3ZLyMjGIJ2A7Yc1eEYHkUy36oJgsw4UFSXk1dm64P8rQoHSnhvMy8lfF0w001UsVC2OMCHTHCP9zQKTuJrRoNzMp7+0ixySxS8zT3vZcSy32CYu1WGRBPsQUEfwdiyNa9FNEluHC42IC7IOPRKB5pwhITxX+OkPdvDLyV8XTDTTVSxULo4ZVeE5Y8l3wSE7dA4TfudLmqcCyHDUX6hP1ILAVfk7KL/Be6tl6Yc2IBdcMZWXpNjbhDLG7fi8yRxcn7zVZZOeIFGsNZeSviqdT5OplJILv5cKSjBc56jUZdToNVLM4RmO/5HmzbNb9yXGXcMs+Tu7/0qR+TaH9Oe8y0kF3I/4Wu+W81P1+MVbrhZWuoaz8VfF0gly9jMTCgD2SMmuibCOszCbx0t3i2JjT3wQRd7wulFRzs5YKJe+LrfFnqt24pPyqSb/dkmW4MU2863xD06Kdyj9SPK3QUi+dulL7iOxC+uPLWPW0XZrvVhFsvaFuCRoxVQRmL8oPVItyrBe/fGQdzyd15ifXTyTXa5LzHUTQ3ogTcTJ+FcF+FtqVpSpsn3FvosjercXNqWdl5a+Kpyxa6iW9Y5yZHNQn3RHqXynXGPqFeDH2Eqm5rxrun4I7hCX4XPiVu4sAakD4njOavHQtIMr6OtyITjiK4GochutEduRtIfMUsRvN0NwFaFcWio99mTYLhYH4QHxEO1AExBtF0iLr20MZ+avgKTNeNbTUS3phjBef6xsxoJ5/Xp5D1ohFCelR4n+WHcXX5U9EAHy3+OEvjf1FgNZOoFqWoyhWC4XNEUo6XCj7BdymnotPo4gslBv7om2exnkid9+Pb0X+fq7mbkoZ+avgKTtX29JLX++38x562BxVpmt76OF/g97C6KGHDPwH33hOL7WyWH8AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$\\displaystyle 1.37346711969617$"
      ],
      "text/plain": [
       "1.37346711969617"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(e2, n)[0].evalf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
